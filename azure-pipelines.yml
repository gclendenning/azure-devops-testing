# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main
  tags:
    include:
    - release-*

pr:
  branches:
    include:
    - main
    exclude:
    - doc/*
    - README.rst

pool:
  vmImage: ubuntu-latest

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]


stages:
  - stage:
    displayName: DummyStage
    jobs:
      - job: Print stuff
        steps:
          - script: echo stuff
  
  - stage:
    displayName: Build and publish
    dependsOn: DummyStage
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/release-'), eq(variables.triggeredByPullRequest, false))
    jobs:
      - job: Check versions
        steps:
        - script: echo 'Dont show this for PRs'
          displayName: Hide from PRs
          condition: and(succeeded(), eq(variables.triggeredByPullRequest, false))

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.10'
          displayName: 'Use Python 3.10'

        - bash: |
            export PACKAGE_VERSION="$(python setup.py --version)"
            echo "Package Version: ${PACKAGE_VERSION}"
            echo "##vso[task.setvariable variable=packageVersionFormatted;]release-${PACKAGE_VERSION}"
          displayName: 'Get package version'

        - script: echo 'version $(packageVersionFormatted)'
          displayName: 'test'

        - bash: |
            echo "stuff"
            echo "building package"
          displayName: "Error if package version doesn't match tag"
          condition: and(startsWith(variables['Build.SourceBranch'], 'refs/tags/release-'), ne(variables['Build.SourceBranchName'], variables['packageVersionFormatted']))

        - script: echo "Checking if the package should be published"
          displayName: 'Publish package'
        - ${{ if eq(variables.Build.SourceBranchName, variables.packageVersionFormatted) }}:
          - script: |
              echo "publishing"
              echo $(Build.SourceBranchName)
              echo $(packageVersionFormatted)
        - ${{ else }}:
          - script: |
              echo "Tag $(Build.SourceBranchName) does not match version derived from setup.py $(packageVersionFormatted)"
              exit 1





